---
import Layout from "../layouts/Layout.astro";
import SectionHeader from "../components/SectionHeader.astro";
---

<Layout title="Jadrian's Portfolio">
  <main>
    <div class="container">
      <SectionHeader title="2 Truths 1 Lie" href="/about/" />
      <div class="flex-0">
        <div class="instructions-container">
          <p class="instructions">
            I'll show you 3 statements, you guess which one is the <code
              >LIE</code
            > Let me know how you did!
          </p>
        </div>
        <ul role="list" class="link-card-grid">
          <li>
            <p class="instructions lie-card">
              <img src="/question-mark.png" alt="Question Mark" width="64" height="64">
            </p>
            <h2 class="card-title">Statement #1</h2>
          </li>
          <li>
            <p class="instructions lie-card">
              <img src="/question-mark.png" alt="Question Mark" width="64" height="64">
            </p>
            <h2 class="card-title">Statement #2</h2>
          </li>
          <li>
            <p class="instructions lie-card">
              <img src="/question-mark.png" alt="Question Mark" width="64" height="64">
            </p>
            <h2 class="card-title">Statement #3</h2>
          </li>
        </ul>
	<div class="comment-box"></div>
        <div class="center-box">
          <button id="reset-button">Start Game!</button>
          <div><h2>Correct / Incorrect: <div class="counter">0</div>/<div class="counter">0</div></h2></div>
        </div>
      </div>
      <script>
        // initial data
        const gameData = {
          truths: [
            "I was born on a Friday the 13th (Spooky)",
            "I played clarinet in high school band",
            "I went to the University of Waterloo for NanoTechnology Engineering",
            "I was a team leader at McDonald's in high school",
            "I built my own PC",
            "I think that windows 10 has a better UI than MacOS",
            "I like Javascript",
            "I almost got an internship with Apple, but was happy in hindsight that I wasn't selected",
          ],
          lies: [
            "I played the UPS guy in my high school's production of Legally Blonde",
            "I still use Windows 7 daily",
            "Internet explorer is a great browser",
            "I have been to Italy",
          ],
        };
        const buttons = document.getElementsByClassName(
          "lie-card"
        ) as HTMLCollectionOf<HTMLButtonElement>;

        const cardTitles = document.getElementsByClassName("card-title") as HTMLCollectionOf<Element>;
        // main game 'loop'
        let lieIndex = -1;
        const resetBoard = () => {
          const initialStatements = Array(3)
            .fill(1)
            .map((n, i) => i);
          let shuffled = initialStatements
            .map((value) => ({ value, sort: Math.random() }))
            .sort((a, b) => a.sort - b.sort)
            .map(({ value }) => value);
          const cardData = shuffled.map((value, index) => {
            if (value >= 2) {
              lieIndex = index;
              return getLie();
            } else {
              return getTruth();
            }
          });
          for (let i = 0; i < buttons.length; i++) {
            buttons[i].style.backgroundColor = "";
            buttons[i].innerHTML = cardData[i];
            cardTitles[i].innerHTML = `Statement #${i + 1}`;
          }
          if (gameData.lies.length === 0) {
            const resetButton = document.getElementById(
              "reset-button"
            ) as HTMLButtonElement;
            resetButton!.disabled = true;
          }
          const resetButton = document.getElementById(
            "reset-button"
          ) as HTMLButtonElement;
          resetButton!.innerHTML = "Next Round!";
        };

        // Setup click listeners
        const handleClick = (id: number) => () => {
          if (lieIndex < 0) return;
          if (id !== lieIndex) {
            //incorrect
            setCardState(id, false);
          } else if (id === lieIndex) {
            //correct
            setCardState(id, true);
          }
        };
        for (var i = 0; i < buttons.length; i++) {
          buttons[i].addEventListener("click", handleClick(i));
        }
        const resetButton = document.getElementById("reset-button");
        resetButton?.addEventListener("click", resetBoard);

        // Helper functions
        function setCardState(id: number, isCorrect: boolean) {
          const newColor = isCorrect ? "#035428" : "#f04216";
          buttons[id].style.backgroundColor = newColor;
          buttons[id].style.border = "2px solid black";
          cardTitles[id].innerHTML = isCorrect ? "Correct!" : "Incorrect";
          if (isCorrect) incrementCounter(0);
          if (!isCorrect) incrementCounter(1);
        }
        function incrementCounter(counterId: number) {
          const counter = document.getElementsByClassName("counter").item(counterId) as HTMLElement;
          const currentValue = Number(counter.innerHTML);
          counter.innerHTML = String(currentValue + 1);
        }
        function getRandomNumber(num: number) {
          return Math.floor(Math.random() * num);
        }
        function getLie() {
          return gameData.lies.splice(
            getRandomNumber(gameData.lies.length),
            1
          )[0];
        }
        function getTruth() {
          return gameData.truths.splice(
            getRandomNumber(gameData.truths.length),
            1
          )[0];
        }
      </script>
    </div>
  </main>
</Layout>

<style>
  h2 {
    padding-top: 1rem;
  }
  .counter {
    display: inline;
  }
  p {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  vertical-container {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
  }
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 80ch;
    height: 93vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  .instructions-container p {
    display: block;
  }
  .instructions-container {
    margin-left: 0.5rem;
    margin-right: 0.5rem;
  }
  .center-box {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  #reset-button {
    border-radius: 0.4rem;
    border: none;
    padding: 0.5rem;
    background-color: #035451;
    color: white;
    font-size: large;
    margin: 0rem 1rem;
  }
  #reset-button:disabled {
    background-color: grey;
    cursor: not-allowed;
  }
  h2 {
    margin-top: 0rem;
  }
  .link-card-grid {
    text-align: center;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
    margin-bottom: 0.25rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    /* grid-template-columns: 1fr 1fr 1fr; */
    grid-template-columns: repeat(3, 31.66%);
    gap: 1rem;
    padding: 0;
    list-style: none;
    margin-left: 0.5rem;
    margin-right: 0.5rem;
  }
  .lie-card {
    height: 250px;
  }
</style>
