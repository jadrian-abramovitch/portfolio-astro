---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import { library, icon } from "@fortawesome/fontawesome-svg-core";
import {
  faEnvelope,
  faAddressCard,
  faBook,
  faLaptopCode,
} from "@fortawesome/free-solid-svg-icons";

library.add(faEnvelope, faAddressCard, faBook, faLaptopCode);
const addressCard = icon({ prefix: "fas", iconName: faAddressCard.iconName });
const envelope = icon({ prefix: "fas", iconName: faEnvelope.iconName });
const book = icon({ prefix: "fas", iconName: faBook.iconName });
const laptop = icon({ prefix: "fas", iconName: faLaptopCode.iconName });
---

<Layout title="Jadrian's Portfolio">
  <main>
    <div
      class="md:grid md:grid-cols-3 gap-0 place-items-center justify-end w-8/12 m-auto"
    >
      <div id="left-box" class="w-full">
        <div>
          <h1 class="block text-wrap text-end">
            Hi, I'm <code class="text-emerald-600 font-extrabold">Jadrian</code>
          </h1>
          <p class="text-2xl block text-wrap text-end">
            I'm a <code
              class="text-emerald-600 font-extrabold tracking-[-0.05em]"
              >fullstack-developer</code
            >
            who loves working with teams to deliver great software
          </p>
        </div>
      </div>
      <div id="center-box" class="h-full hidden md:block w-full px-2">
        <canvas id="canvas" class="h-full w-full"></canvas>
      </div>
      <div id="right-box" class="flex justify-start w-full">
        <ul transition:name="menu" role="list" class="grid grid-cols-1 gap-4">
          <Card
            href="/newAbout/"
            title="About Me"
            icon="about"
            key={0}
            transition:name="about"
          />
          <Card
            href="./projects"
            title="Projects"
            icon="projects"
            key={1}
            transition:name="project"
          />
          <Card
            href="./blog"
            title="Blog"
            icon="blog"
            key={2}
            transition:name="blog"
          />
          <Card
            href="./contact"
            title="Contact"
            icon="contact"
            key={3}
            transition:name="contact"
          />
        </ul>
      </div>
    </div>
  </main></Layout
>

<script>
  function getStartingHeight(index: number) {
    const cards = document.querySelectorAll("#left-box .link-card");
    const cardBounds: Array<DOMRect> = [];
    cards.forEach((card) => cardBounds.push(card.getBoundingClientRect()));
    const leftBoxBounds = document
      .getElementById("left-box")
      ?.getBoundingClientRect();
    const centerBoxBounds = document
      .getElementById("center-box")
      ?.getBoundingClientRect();
    if (!leftBoxBounds || !centerBoxBounds) {
      return 0;
    }
    if (cards.length === 0) {
      return centerBoxBounds.height / 2;
    }
    return (
      leftBoxBounds.y -
      centerBoxBounds.y +
      leftBoxBounds.height -
      (leftBoxBounds.bottom - cardBounds[index].bottom) -
      cardBounds[index].height / 2
    );
  }
  function getCardHeight(index: number) {
    const rightBoxBounds = document
      .getElementById("right-box")
      ?.getBoundingClientRect();
    const cards = document.querySelectorAll("#right-box .link-card");
    const cardBounds: Array<DOMRect> = [];
    cards.forEach((card) => cardBounds.push(card.getBoundingClientRect()));
    if (!rightBoxBounds || !cardBounds.length || !cardBounds[index]) {
      return 0;
    }
    return (
      rightBoxBounds.height -
      (rightBoxBounds.bottom - cardBounds[index].bottom) -
      cardBounds[index].height / 2
    );
  }
  function drawTriangle(
    ctx: CanvasRenderingContext2D,
    left: number,
    right: number,
    y: number
  ) {
    ctx.beginPath();
    ctx.moveTo(left, y);
    ctx.lineTo(left, y + 10);
    ctx.lineTo(right, y);
    ctx.lineTo(left, y - 10);
    ctx.lineTo(left, y);
    ctx.fill();
    ctx.stroke();
  }
  function drawFullLine(index: number, color: string, lineWidth: number) {
    const canvas = document.getElementById("canvas") as HTMLCanvasElement;
    if (!canvas) return;
    const ctx = canvas.getContext("2d");
    const canvasBounds = canvas?.getBoundingClientRect();
    if (!canvasBounds || !ctx) return;

    ctx.fillStyle = color;
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;

    ctx.beginPath();
    ctx.moveTo(0, getStartingHeight(0)); // this is hard coded for about
    ctx.lineTo(canvasBounds.width / 2, getStartingHeight(0)); // this is hard coded for /about
    ctx.lineTo(canvasBounds.width / 2, getCardHeight(index));
    ctx.lineTo(canvasBounds.width - 25, getCardHeight(index));
    ctx.stroke();
    drawTriangle(
      ctx,
      canvasBounds.width - 35,
      canvasBounds.width - 10,
      getCardHeight(index)
    );
  }
  function drawDefault() {
    const canvas = document.getElementById("canvas") as HTMLCanvasElement;
    const leftBox = document.getElementById("left-box");
    const rightBox = document.getElementById("right-box");
    const cards = document.querySelectorAll("#right-box .link-card");
    cards.forEach((card) => {
      card.addEventListener("focus", focus, true);
      card.addEventListener("blur", blur, true);
      card.addEventListener("mouseover", mouseIn);
      card.addEventListener("mouseout", mouseOut);
    });
    if (canvas && leftBox && rightBox && cards.length) {
      canvas.width = canvas?.offsetWidth; // lines super blurry without this
      canvas.height = canvas?.offsetHeight;
      const ctx = canvas.getContext("2d");
      if (!ctx) {
        return;
      }
      cards.forEach((_, index) => drawFullLine(index, "black", 3));
    }
  }
  function focus(e: any) {
    drawFullLine(e.target.id, "#831843", 10);
  }
  function blur() {
    drawDefault();
  }
  function mouseIn(e: any) {
    drawFullLine(e.target.id, "#831843", 10);
  }
  function mouseOut() {
    drawDefault();
  }
  function reload() {
    drawDefault();
  }
  window.addEventListener("resize", mouseOut, true);
  document.addEventListener("astro:page-load", reload);
  drawDefault();
</script>
<style>
  main {
    margin: auto;
    padding: 1.5rem;
    height: 95vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0px;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }
</style>
